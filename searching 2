1. 
public class Aggressive_cows {
    public static boolean canWePlace(int[] stalls, int dist, int cows) {
        int countCows = 1;
        int lastPlaced = stalls[0];
        for (int i = 1; i < stalls.length; i++) {
            if (stalls[i] - lastPlaced >= dist) {
                countCows++;
                lastPlaced = stalls[i];
            }
        }
        if (countCows >= cows) {
            return true;
        }
        return false;
    }

    public static int aggressiveCows(int[] stalls, int k) {
        int n = stalls.length;
        Arrays.sort(stalls);
        int low = 1;
        int high = stalls[n - 1] - stalls[0];
        while (low <= high) {
            int mid = (low + high) / 2;
            if (canWePlace(stalls, mid, k) == true) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return high;
    }
}



2.
public static int findPow(int x, int p, int val){
    long ans = 1;
    for(int i = 0; i<p; i++){
        ans *= x;
        if(ans > val) return 2;
    }
    if(ans == val) return 0;
    else return 1;
}

public int NthRoot(int r, int x){
    int low = 1;
    int high = x;
    while(low <= high){
        int mid = (low + high) / 2;
        int p = findPow(mid, r, x);
        if(p == 0) return mid;
        else if(p == 1) low = mid + 1;
        else high = mid - 1;
    }
    return -1;

}

}



3.public class Get_Equal_Substrings_Within_Budget {

    public int equalSubstring(String s, String t, int maxCost) {
           int j = 0;
           for (int i = 0; i < s.length(); ++i) {
             maxCost -= Math.abs(s.charAt(i) - t.charAt(i));
             if (maxCost < 0)
               maxCost += Math.abs(s.charAt(j) - t.charAt(j++));
           }

           return s.length() - j;
         }

}



4.public class Find_peak_element {
    public int findPeakElement(int[] nums) {
     int start = 0;
     int end = nums.length - 1;
     while (start < end) {
         int mid = start + (end - start) / 2;
         if (nums[mid] > nums[mid + 1]) {
             end = mid;
         } else {
             start = mid + 1;
         }
     }
     return start;
 }
}



5.
package searching2;

import java.util.*;

public class Single_element_in_a_sorted_array {
    public int singleNonDuplicate(int[] arr) {
        if(arr.length==1) return arr[0];
        if(arr[0]!=arr[1]) return arr[0];
        int s=0;
        int e=arr.length-1;
        int ans;
        while(s<=e)
        {
            int mid=(s+e)/2;
        //case1
            if(arr[mid]!=arr[mid-1]&&arr[mid]!=arr[mid+1])
            {
                ans=mid;
                break;
            }
        //case2
            if(mid%2==0)
            {
                if(arr[mid]==arr[mid+1])
                s=mid+1;
                else
                e=mid-1;
            }
        //case3
            else
            {
                if(arr[mid]==arr[mid+1])
                e=mid-1;
                else
                s=mid+1;
            }
        }
        return arr[ans];
    }
}
