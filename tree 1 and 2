class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> queue= new LinkedList<TreeNode>();
        List<List<Integer>> wrapList =new LinkedList<List<Integer>>();
        if(root== null)return wrapList;
        queue.offer(root);
        while(!queue.isEmpty()){
            int levelNum= queue.size();
            List<Integer>subList=new LinkedList<Integer>();
            for(int i=0;i<levelNum; i++){
                if(queue.peek().left!=null)queue.offer(queue.peek().left);
                if(queue.peek().right!=null)queue.offer(queue.peek().right);
                subList.add(queue.poll().val);
            }
            wrapList.add(subList);
        }
        return wrapList;
    }
}


2.
class Solution {
    public int findBottomLeftValue(TreeNode root) {
      Queue<TreeNode> queue=new ArrayDeque<>();
      queue.add(root);

      int left_most=0;

      while(queue.size()>0) 
      {
        left_most=queue.peek().val;
        int size=queue.size();
        for(int i=1; i<=size;i++)
        {
            TreeNode tmp=queue.poll();
            if(tmp.left!=null)queue.add(tmp.left);
            if(tmp.right!=null)queue.add(tmp.right);
        }
      } 
      return left_most;
    }
}


3.class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null)return 0;
        int leftheight= maxDepth(root.left);
        int rightheight= maxDepth(root.right);

        return 1+ Math.max(leftheight,rightheight);
        
    }
}




4.class Solution {
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null || q==null){
            return(p==q);
        }
        return(p.val==q.val) && isSameTree(p.left,q.left) && isSameTree(p.right, q.right);
    }
}
