public class find_rotation_count {
public int searchPeak(int a[], int low, int high) {
int mid = low + (high - low) / 2;
if (a[low] <= a[mid] && a[mid] <= a[high])
return low;
else if (a[mid] >= a[low])
return searchPeak(a, mid + 1, high);
else
return searchPeak(a, low, mid);
}
public int findKRotation(int arr[], int n) {
return searchPeak(arr, 0, n - 1);
}
}

 


2.
public class find_first_and_last_position_of_element_in_rotated_sored_array {
public int[] searchRange(int[] nums, int target) {
int[] ans = { -1, -1 };
int start = search(nums, target, true);
int end = search(nums, target, false);
ans[0] = start;
ans[1] = end;
return ans;
}

int search(int[] nums, int target, boolean findStartIndex) {
    int start = 0;
    int end = nums.length - 1;
    int ans = -1;
    while (start <= end) {
        int mid = start + (end - start) / 2;
        if (target > nums[mid]) {
            start = mid + 1;
        } else if (target < nums[mid]) {
            end = mid - 1;
        } else {
            ans = mid;
            if (findStartIndex == true) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
    }
    return ans;
}
}




3.public class Minimum_in_rotated_sorted_array {

public int findMin(int[] nums) {
    int s = 0;
    int e = nums.length - 1;

    while (s < e) {
        int mid = s + (e - s) / 2;

        if (nums[mid] < nums[e]) {
            e = mid;
        } else
            s = mid + 1;

    }
    return nums[s];
}
}




4.package searching1;

public class Search_in_rotated_sorted_array {
public int search(int[] nums, int target) {
int start = 0;
int end = nums.length - 1;
while (start <= end) {
int mid = start + (end - start) / 2;
if (nums[mid] == target) {
return mid;
} else if (nums[mid] >= nums[start]) {
if (target >= nums[start] && target < nums[mid]) {
end = mid - 1;
} else {
start = mid + 1;
}
} else {
if (target > nums[mid] && target <= nums[end]) {
start = mid + 1;
} else {
end = mid - 1;
}
}
}
return -1;
}

}




5.public class search_in_rotated_sorted_arrayII {
public boolean search(int[] nums, int target) {
int start = 0;
int end = nums.length - 1;
while (start <= end) {
int mid = start + (end - start) / 2;
if (nums[mid] == target) {
return true;
}
if (nums[start] == nums[mid] && nums[end] == nums[mid]) {
start++;
end--;
continue;
}
if (nums[mid] >= nums[start]) {
if (target >= nums[start] && target < nums[mid]) {
end = mid - 1;
} else {
start = mid + 1;
}
} else {
if (target > nums[mid] && target <= nums[end]) {
start = mid + 1;
} else {
end = mid - 1;
}
}
}
return false;
}

}
